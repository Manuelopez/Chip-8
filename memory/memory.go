package memory

import (
	"chip-8/register"
	"chip-8/util"
)

type Memory struct {
	m [64][64]register.Register
}

func New() *Memory {
	m := Memory{}

	return &m
}

func (m *Memory) Write(address uint16, value uint8) {
    //address
    hbits := address >> 4 
    lbits := address & 0x0f
    // values

    _, lbitsVal := util.DecimalToBinary16(uint16(value))

    m.m[hbits][lbits].Write(lbitsVal)
}

func (m *Memory) Read(address uint16) [8]bool{
    hbits := address >> 4 
    lbits := address & 0x0f
    // values

    return m.m[hbits][lbits].Read()
}

func (m *Memory) writeFonts() {
	fonts := [80]uint16{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80, // F
	}


    p := 0;
    for i:= 0x050; i <= 0x09f; i++{
        // mem address
        hbits := i >> 4;
        lbits := i & 0x0f

        // value
        val := fonts[p]
        _, lbitsVal := util.DecimalToBinary16(val)

        // 
        m.m[hbits][lbits].Write(lbitsVal)

        p++
    }


}
